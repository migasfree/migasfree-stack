global
    maxconn 4096
    maxpipes 1024
    log 127.0.0.1 local0
    log 127.0.0.1 local1 notice
    # tune.bufsize 32768   # workaround -> 414 Request-URI Too Large
    tune.ssl.default-dh-param 2048
    ssl-server-verify none
    pidfile /run/haproxy.pid
    
    # Enable HAProxy runtime API
    stats socket :9999 level admin expose-fd listeners

    #external-check



defaults
    log global
    mode    http
    option httplog
    option dontlognull
    option http-keep-alive
    timeout connect 20s
    timeout client  10m
    timeout server  10m

    #https://github.com/Jonathan-Rosewood/haproxy-custom-errors
    errorfile 429 /etc/haproxy/errors-custom/429.http
    errorfile 502 /etc/haproxy/errors-custom/502.http
    errorfile 503 /etc/haproxy/errors-custom/503.http

frontend http
    bind *:80

    bind :443 ssl crt /usr/local/etc/haproxy/certificates/"${FQDN}".pem
    
    # Certificate autosigned and CA-FILE
    #bind *:443 ssl crt /certs/cert.pem ca-file /certs/ca.crt verify optional crt-ignore-err all
    # Certificate and CA-FILE
    #bind *:443 ssl crt /certs/cert.pem ca-file /certs/ca.crt    

    http-request add-header X-Forwarded-Proto https

    # ACL Certbot
    acl certbot path_beg /.well-known/acme-challenge/
    
    mode http
#    acl certificates_check url_beg /.well-known
#    use_backend certificates if certificates_check



    # DDOS
    http-request track-sc0 src table per_ip_rates
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 500 }

    http-request set-var(txn.path) path   # for services_cache

    # WEBSOCKETS
    acl is_websocket hdr(Upgrade) -i WebSocket

    acl url_backend  path_beg  /api/ /rest-auth/ /token-auth-jwt/ /token-auth/ /token-refresh/ /admin/ /grapelly/ /markdownx/ /redocs/ /graphql/ /docs/ /api-docs/ /redoc/ /alerts/
    
    # api v4 COMPATIBILITY
    acl url_backend  path_beg /get_key_repositories /get_properties /get_computer_info
    http-request replace-path /admin/server/computer/(.*)/change /computers/results/\1    # migasfree-play 1.x 



    # frontend
    # ======
    acl url_root path / 
    acl url_empty path_len 0
  
    #acl url_frontend path_beg  /app/
   



    # public
    # ======
    acl url_public path_beg /public/ /static/ /repo/  # (/repo = retrocompatibility)


    # services static
    # ==================
    acl url_services path_beg /services
    acl url_services_static path_beg /services-static /favicon.ico

    acl is_GET method GET


    # external sources
    # ================
    acl url_src path_beg /src/
    acl url_packages path_end .deb .rpm


    use_backend mf_frontend if url_root or url_empty
    use_backend mf_backend if url_backend || is_websocket
    use_backend services if is_GET url_services || url_services_static
    use_backend mf_public if url_public || url_packages || url_src
    use_backend core_certbot if certbot

    default_backend mf_frontend
    #default_backend services


backend core_certbot
    server core_certbot core_certbot:380


#backend certificates
#    mode http
#    balance leastconn
#    server letsencrypt letsencrypt:80 check init-addr last,libc,none


backend mf_public
    mode http

    balance roundrobin

    # checks
    # option external-check
    # external-check command /usr/bin/check-public

    option tcp-check

    # NODES
    # ======
    {% for node in mf_public %}
    server {{ node }} {{ node }}:80  check port 80 inter 2000 rise 1 fall 1
    {% endfor %}

    server 127.0.0.1 127.0.0.1:8001 backup


backend mf_backend
    mode http

    balance roundrobin


    # For SWAGGER and REST-FRAMEWORK. It is also necessary "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')" in settings.py
    http-request add-header X-Forwarded-Proto https   

    #option forwardfor
    #http-request set-header X-Forwarded-For %[src]


    #cookie SRVNAME insert  secure # https://thisinterestsme.com/haproxy-sticky-sessions/

    # checks
    #option external-check
    #external-check command /usr/bin/check-backend

    option tcp-check

    # NODES
    # ======
    {% for node in mf_backend %}
    # server {{ node }} {{ node }}:8080 cookie BE_{{ node }} check inter 2000 rise 1 fall 1
    server {{ node }} {{ node }}:8080 check port 8080 inter 2000 rise 1 fall 1
    {% endfor %}

    # server 127.0.0.1 127.0.0.1:8001 backup


backend mf_frontend
    mode http

    balance roundrobin
    
    http-request redirect scheme https unless { ssl_fc }

    #redirect scheme https code 307 if !{ ssl_fc }

    # checks
    #option external-check
    #external-check command /usr/bin/check-frontend
    option tcp-check

    # NODES
    # ======
    {% for node in mf_frontend %}
    server {{ node }} {{ node }}:80  check port 80 inter 2000 rise 1 fall 1
    {% endfor %}

    server 127.0.0.1 127.0.0.1:8001 backup


backend services
    mode http
    
    acl url_services_cache var(txn.path) -m beg /services-static /favicon.ico
    acl url_status var(txn.path) -m beg /services/status

    #balance roundrobin
    http-response set-header Cache-Control public,max-age=604800,immutable if url_services_cache || url_status

    server 127.0.0.1 127.0.0.1:8001



backend per_ip_rates
    stick-table type ip size 1m expire 10m store http_req_rate(10s)


